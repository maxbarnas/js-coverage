'use strict';

const code = `
function fib2(n) {
  var fiber = { arg: n, returnAddr: null, a: 0 /* b is tail call */ };
  rec: while (true) {
    if (fiber.arg <= 2) {
      var sum = 1;
      while (fiber.returnAddr) {
        fiber = fiber.returnAddr;
        if (fiber.a === 0) {
          fiber.a = sum;
          fiber = { arg: fiber.arg - 2, returnAddr: fiber, a: 0 };
          continue rec;
        }
        sum += fiber.a;
      }
      return sum;
    } else {
      fiber = { arg: fiber.arg - 1, returnAddr: fiber, a: 0 };
    }
  }
}

fib2( 10 );
`

let fnCount = 0;
function createCounterFn() {
	return `\n___cnt( ${ fnCount++ } );\n`;
}

// The one and only amazing leftpad.
function leftpad( text, count ) {
	text = '' + text;
	count = +count;

	let padding = (count - text.length) || 1;

	return new Array( padding + 1 ).join(' ') + text;
}

// Stores counter. Every line has distinct counter.
let count = {};

// Counting function injected into evaluated code. The `id` is generated by `createCounterFn()`.
function ___cnt( id ) {
	count[ id ] = !count[ id ] ? 1 : count[ id ]+1;
}

// Prepare code by injecting counting function.
let lines = code.
	split( '\n' ).
	filter( line => {
		return line.trim()
	} ).
	map( x => {
		return createCounterFn() + x;
	} )
	.join( '' );

// Run prepared code.
eval( lines );

// Find biggest counter.
const topCounter = Math.max.apply( Math, Object.values( count ) );
const graphPadding = 10;
const counterPadding = 5;

let i = 0;

// Prepare output "chart".
// Remove injected functions, prepend counters and hashes.
const chart = lines.
	split( '\n' ).
	filter( line => line && !line.startsWith( '___cnt(' ) ).
	map( line => {
		const c = count[ i++ ];
		if (!c && c !== 0) {
			return leftpad( '0', counterPadding) + ' ' + leftpad( '', graphPadding ) + ' ' + line;
		}
		const code = new Array( Math.round( c / topCounter * graphPadding ) ).join('#')  ;

		return leftpad( c, counterPadding ) + ' ' + leftpad( code, graphPadding ) + ' ' + line;
	} ).
	join('\n');

// Show the results.
console.log( chart );